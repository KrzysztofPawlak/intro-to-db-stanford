https://lagunita.stanford.edu/c4x/Engineering/db/asset/moviedata.html

### SQL Movie-Rating Query Exercises Core Set ###
1. Find the titles of all movies directed by Steven Spielberg. 

select title 
from Movie 
where director = 'Steven Spielberg';

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. 

select year
from Movie
where mID in (select mID from Rating where stars = 4 or stars = 5)
order by year ASC;

3. Find the titles of all movies that have no ratings. 

select title
from Movie
where mID not in (select mID from Rating);

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 

select name 
from Reviewer 
where rID in (select rID from Rating where ratingDate is null);

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 

select v.name as reviewer_name, m.title as movie_title, r.stars, r.ratingDate
from Movie m, Reviewer v, Rating r
where m.mID = r.mID and v.rID = r.rID
order by v.name, m.title, r.stars;

6*. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 

select rev.name, m.title
from Reviewer rev, Movie m, Rating r1, Rating r2
where r1.rID = r2.rID and r1.mID = r2.mID and 
r2.rID = rev.rID and r2.mID = m.mID and
r2.stars > r1.stars and r2.ratingDate > r1.ratingDate;

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 

select m.title, max(r.stars)
from Movie m, Rating r
where m.mID = r.mID
group by m.mID
order by m.title;

8. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

select m.title, avg(r.stars) as average
from Movie m, Rating r
where m.mID = r.mID
group by m.title
order by average DESC;

9. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

select rev.name 
from Rating rat, Reviewer rev
where rat.rID = rev.rID
group by rev.name
having count(rat.stars) > 2;

### SQL Movie-Rating Query Exercises Extra Practice ###
Q1 Find the names of all reviewers who rated Gone with the Wind. 

select distinct name 
from Reviewer rev, Movie m, Rating rat
where rev.rID = rat.rID and m.mID = rat.mID and m.title = 'Gone with the Wind'; 

Q2* For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

select distinct name, title, stars
from Movie join Rating using(mID) join Reviewer using(rID) 
where director = name;

Q3 Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

select name
from Reviewer 
union 
select title 
from Movie;

Q4 Find the titles of all movies not reviewed by Chris Jackson. 

select distinct title 
from Movie 
where mID not in (select mID from Reviewer rev, Rating r where rev.rID = r.rID and name = 'Chris Jackson');

Q5 For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.

select distinct rev1.name, rev2.name
from Rating r1 inner join Rating r2, Reviewer rev1, Reviewer rev2
on r1.mID = r2.mID
where r1.rID != r2.rID and
rev1.rID = r1.rID and
rev2.rID = r2.rID and
rev1.name < rev2.name
group by r1.mID;